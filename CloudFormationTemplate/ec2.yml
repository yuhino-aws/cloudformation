### [Change System Name] awsmaster
### ImportValue: vpc, route53
AWSTemplateFormatVersion: "2010-09-09"
Description: Create EC2 Instance etc.

Parameters:
  SystemName:
    Description: System Name
    Type: String
    Default: senobe ### [Change System Name]
  Environment:
    Description: Environment
    Type: String
    Default: prod
    AllowedValues:
      - prod
      - stg
      - dev
  SubDomain:
    Description: Sub Domain
    Type: String
    Default: ec2
    AllowedPattern: ^[^.]*$
  ResourceName:
    Description: Resource Name
    Type: String
    Default: notvia
  EC2ImageId:
    Description: >
      Specifies the AMI ID for your instances.
      https://aws.amazon.com/jp/blogs/news/query-for-the-latest-amazon-linux-ami-ids-using-aws-systems-manager-parameter-store/
      e.g. amzn2-ami-hvm-2.0.20201218.1-x86_64-gp2
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Environment Configuration"
        Parameters:
          - SystemName
          - Environment
          - SubDomain
          - ResourceName
          - EC2ImageId

Resources:
  ## IAM: Role
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${SystemName}-${Environment}-${ResourceName}-ec2-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        ## To use the Session Manager
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Policies:
        - PolicyName: AmazonS3CfGetObjectPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: s3:ListAllMyBuckets
                Resource: "*"
              - Effect: Allow
                Action: s3:ListBucket
                Resource: !Sub arn:aws:s3:::cf-${AWS::AccountId}-${AWS::Region}
              - Effect: Allow
                Action: s3:GetObject
                Resource: !Sub arn:aws:s3:::cf-${AWS::AccountId}-${AWS::Region}/*

   ## IAM: Instance Profile
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Ref IAMRole
      Roles:
        - !Ref IAMRole

  ## EC2(VPC): Security Group
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${SystemName}-${Environment}-${ResourceName}-ec2-sg
      GroupDescription: !Sub ${SystemName}-${Environment}-${ResourceName}-ec2-sg
      VpcId:
        Fn::ImportValue: !Sub ${SystemName}-${Environment}-vpc-VPC
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-${ResourceName}-ec2-sg

  ## EC2(VPC): Security Group Inbound Rule From Any (HTTP)
  EC2SecurityGroupIngressHttp:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
      Description: any

  ## EC2: Instance
  Instance:
    Type: AWS::EC2::Instance
    ## To retain the instance to be replaced when updating the instance
    UpdateReplacePolicy: Retain
    Properties:
      ImageId: !Ref EC2ImageId
      InstanceType: t2.micro
      IamInstanceProfile: !Ref IAMInstanceProfile
      SubnetId:
        Fn::ImportValue: !Sub ${SystemName}-${Environment}-vpc-SubnetPublicC
      SecurityGroupIds:
       - !Ref EC2SecurityGroup
      Monitoring: false
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum -y update
          aws configure set default.region ${AWS::Region}
          amazon-linux-extras install docker -y
          systemctl enable docker.service
          systemctl start docker.service
          curl -L "https://github.com/docker/compose/releases/download/1.27.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          chmod +x /usr/local/bin/docker-compose
          ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
          docker run --name nginx --restart=always -d -p 80:80 nginx
      ## To change the volume type from gp2 to gp3
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: 8
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: false
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-${ResourceName}

  ## EC2: EIP
  EIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      InstanceId: !Ref Instance
      Tags:
        - Key: Name
          Value: !Sub ${SystemName}-${Environment}-${ResourceName}-ec2

  ## Route53: RecordSet (IPv4)
  Route53RecordSetIPv4:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Fn::ImportValue: !Sub ${SystemName}-${Environment}-route53-HostedZone
      Name: !Sub
          - "${SubDomain}.${DomainName}."
          - DomainName:
              Fn::ImportValue: !Sub ${SystemName}-${Environment}-route53-HostedZoneDomainName
      Type: A
      ResourceRecords:
        - !Ref EIP
      TTL: "300"

Outputs:
  ## IAM: Role
  IAMRole:
    Value: !Ref IAMRole
    Export:
      Name: !Sub ${AWS::StackName}-IAMRole

  IAMRoleArn:
    Value: !GetAtt IAMRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-IAMRoleArn

   ## IAM: Instance Profile
  IAMInstanceProfile:
    Value: !Ref IAMInstanceProfile
    Export:
      Name: !Sub ${AWS::StackName}-IAMInstanceProfile

  IAMInstanceProfileArn:
    Value: !GetAtt IAMInstanceProfile.Arn
    Export:
      Name: !Sub ${AWS::StackName}-IAMInstanceProfileArn

  ## EC2(VPC): Security Group
  EC2SecurityGroup:
    Value: !Ref EC2SecurityGroup
    Export:
      Name: !Sub ${AWS::StackName}-EC2SecurityGroup

  EC2SecurityGroupVpcId:
    Value: !GetAtt EC2SecurityGroup.VpcId
    Export:
      Name: !Sub ${AWS::StackName}-EC2SecurityGroupVpcId

  ## EC2: Instance
  Instance:
    Value: !Ref Instance
    Export:
      Name: !Sub ${AWS::StackName}-Instance

  InstanceAvailabilityZone:
    Value: !GetAtt Instance.AvailabilityZone
    Export:
      Name: !Sub ${AWS::StackName}-InstanceAvailabilityZone

  InstancePrivateDnsName:
    Value: !GetAtt Instance.PrivateDnsName
    Export:
      Name: !Sub ${AWS::StackName}-InstancePrivateDnsName

  InstancePrivateIp:
    Value: !GetAtt Instance.PrivateIp
    Export:
      Name: !Sub ${AWS::StackName}-InstancePrivateIp

  InstancePublicDnsName:
    Value: !GetAtt Instance.PublicDnsName
    Export:
      Name: !Sub ${AWS::StackName}-InstancePublicDnsName

  InstancePublicIp:
    Value: !GetAtt Instance.PublicIp
    Export:
      Name: !Sub ${AWS::StackName}-InstancePublicIp

  ## EC2: EIP
  EIP:
    Value: !Ref EIP
    Export:
      Name: !Sub ${AWS::StackName}-EIP

  ## Route53: RecordSet (IPv4)
  Route53RecordSetIPv4:
    Value: !Ref Route53RecordSetIPv4
    Export:
      Name: !Sub ${AWS::StackName}-Route53RecordSetIPv4